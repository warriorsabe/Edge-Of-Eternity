@EdgeOfEternitySettings:HAS[#useArbitraryHomeswitch[?alse|?aven|?erbin]]:BEFORE[EdgeOfEternity]
{
	@useArbitraryHomeswitch = Sun
}
@Kopernicus:HAS[!EdgeOfEternitySettings]:FOR[EdgeOfEternity]
{
	#@EdgeOfEternitySettings {}
}
@Kopernicus:AFTER[EdgeOfEternity]
{
	@Body:HAS[@Orbit],*
	{
		testName = #$name$.$@EdgeOfEternitySettings/useArbitraryHomeswitch$
		testParent = #$Orbit/referenceBody$.$@EdgeOfEternitySettings/useArbitraryHomeswitch$
		@testName ^= :(\w+)\.(\1)$:true:
		@testParent ^= :(\w+)\.(\1)$:true:
	}
}
@Kopernicus:LAST[zEdgeOfEternity]:HAS[@Body:HAS[#testName[true]]]
{
	@Body[Kerbin]
	{
		@name = Haven
		@Template
		{
			@name = Laythe
			!removePQSMods = DELETE
			removeAllPQSMods = true
		}
		@Properties
		{
			@description = What should have been the final resting place of the ICS Mercury, Haven is only marginally habitable, but definitely better than what we've got now. While cold, it has an oxygenated atmosphere, and the coverage of ice suggests an ocean that isn't quite so toxic.
			@isHomeworld = false
		}
		!SpaceCenter {}
	}
	@Body[Brink]
	{
		@Orbit
		{
			@referenceBody = Haven
		}
	}
	@Body[Damocles]
	{
		@Orbit
		{
			@referenceBody = Haven
		}
	}
	@Body:HAS[#testName[true]]
	{
		isTiny = #$Properties/radius$
		@isTiny -= 5000
		@isTiny ^= :^[^\d\.].*:true:
		
		radiusFactor = #$Properties/radius$
		@radiusFactor /= 40000
		
		cbNameLater = #$name$
		oldTemplate = #$Template/name$
		@name = Kerbin
		@Template
		{
			@name = Kerbin
			removeAtmosphere = true
			!removeAllPQSMods = DELETE
			!removePQSMods = DELETE
			removePQSMods = PQSCity[Monolith00], PQSCity[Monolith01], PQSCity[KSC], MapDecal, PQSMod_MapDecalTangent, PQSMod_FlattenArea, PQSLandControl, PQSMod_VertexSimplexHeightAbsolute, PQSMod_VertexHeightNoiseVertHeightCurve2, PQSMod_VertexRidgedAltitudeCurve, PQSMod_VertexHeightMap
		}
		@Properties
		{
			@description = After an unfortunate flyby of Apep, the ICS Mercury was diverted off-course and crash-landed on the wrong planet. Survival was difficult, but possible.
			@isHomeworld = true
		}
		@ScaledVersion:HAS[@Material:HAS[!Gradient]]
		{
			&type = Vacuum
		}
		@PQS
		{
			%materialType = AtmosphericTriplanarZoomRotation
			%Material
			{
				&factor = 10
				&factorBlendWidth = 0.05
				&factorRotation = 180
				&saturation = 0.5
				&contrast = 1.2
				&tintColor = 1,1,1,0
				&specularColor = 0.0367646813,0.0367646813,0.0367646813,0.200000003
				&albedoBrightness = 1
				&steepPower = 3
				&steepTexStart = 500
				&steepTexEnd = 1000000
				&steepTex = BUILTIN/dresSteepDiffuse
				&steepTexScale = 1,1
				&steepTexOffset = 0,0
				&steepBumpMap = BUILTIN/DresSteepNRM
				&steepBumpMapScale = 1,1
				&steepBumpMapOffset = 0,0
				&steepNearTiling = 500
				&steepTiling = 125
				&lowTexScale = 1,1
				&lowTexOffset = 0,0
				&lowTiling = 38000
				&midTex = BUILTIN/dresMid
				&midTexScale = 1,1
				&midTexOffset = 0,0
				&midTiling = 40000
				&midBumpMap = BUILTIN/dresMidNRM
				&midBumpMapScale = 1,1
				&midBumpMapOffset = 0,0
				&midBumpTiling = 40000
				&highTex = BUILTIN/dresHigh
				&highTexScale = 1,1
				&highTexOffset = 0,0
				&highTiling = 40000
				&lowStart = 0
				&lowEnd = 0.3
				&highStart = 0.8
				&highEnd = 1
				&globalDensity = -5E-06
				&fogColorRampScale = 1,1
				&fogColorRampOffset = 0,0
				&planetOpacity = 0
				&oceanFogDistance = 1000
			}
		}
		SpaceCenter
		{
			latitude = 0
			decalLatitude = -0.35	//-0.1
			longitude = 0
			decalLongitude = -1.65	//-0.35
			lodvisibleRangeMult = 6
			repositionRadiusOffset = 44
			heightMapDeformity = 70
			absoluteOffset = 0
			radius = 4400	//7500
			reorientFinalAngle = 270
			groundColor = 0.6,0.6,0.6,0.1
			editorGroundColor = 0.6,0.6,0.6,0.1
			groundTexture = BUILTIN/terrain_grass00_new
			editorGroundTexture = BUILTIN/terrain_grass00_new
		}
	}
	@Body:HAS[#testName[true]&@Orbit:HAS[~referenceBody[Sun]]]
	{
		PostSpawnOrbit
		{
			referenceBody = #$../Orbit/referenceBody$
		}
	}
	@Body:HAS[#testName[true]&@PQS:HAS[@Mods:HAS[@VertexHeightMap[?blate]]]]
	{
		@SpaceCenter
		{
			@repositionRadiusOffset += #$../PQS/Mods/VertexHeightMap[?blate]/deformity$
			@absoluteOffset += #$../PQS/Mods/VertexHeightMap[?blate]/deformity$
		}
	}
	@Body:HAS[#testName[true]&@PQS:HAS[@Mods:HAS[@VertexHeightMap[?enticular]]]]
	{
		@SpaceCenter
		{
			@repositionRadiusOffset += #$../PQS/Mods/VertexHeightMap[?enticular]/deformity$
			@absoluteOffset += #$../PQS/Mods/VertexHeightMap[?enticular]/deformity$
		}
	}
	@Body:HAS[#testName[true]&@PQS:HAS[@Mods:HAS[@VertexHeightMap[?ellipsoid]]]]
	{
		@SpaceCenter
		{
			@repositionRadiusOffset += #$../PQS/Mods/VertexHeightMap[?ellipsoid]/deformity$
			@absoluteOffset += #$../PQS/Mods/VertexHeightMap[?ellipsoid]/deformity$
		}
	}
	@Body:HAS[#testName[true]&@PQS:HAS[@Mods:HAS[@VertexHeightMap16[?blate]]]]
	{
		@SpaceCenter
		{
			@repositionRadiusOffset += #$../PQS/Mods/VertexHeightMap16[?blate]/deformity$
			@absoluteOffset += #$../PQS/Mods/VertexHeightMap16[?blate]/deformity$
		}
	}
	@Body:HAS[#testName[true]&@PQS:HAS[@Mods:HAS[@VertexHeightMap16[?enticular]]]]
	{
		@SpaceCenter
		{
			@repositionRadiusOffset += #$../PQS/Mods/VertexHeightMap16[?enticular]/deformity$
			@absoluteOffset += #$../PQS/Mods/VertexHeightMap16[?enticular]/deformity$
		}
	}
	@Body:HAS[#testName[true]&@PQS:HAS[@Mods:HAS[@VertexHeightMap16[?ellipsoid]]]]
	{
		@SpaceCenter
		{
			@repositionRadiusOffset += #$../PQS/Mods/VertexHeightMap16[?ellipsoid]/deformity$
			@absoluteOffset += #$../PQS/Mods/VertexHeightMap16[?ellipsoid]/deformity$
		}
	}
	@Body:HAS[#testName[true]&@PQS:HAS[@Mods:HAS[@VertexHeightOblateAdvanced:HAS[#oblateMode[CustomEllipsoid]]]]]
	{
		@SpaceCenter
		{
			ellipsoidOffset = 0
			@ellipsoidOffset = #$../PQS/Mods/VertexHeightOblateAdvanced/b$
			@ellipsoidOffset -= 1
			@ellipsoidOffset *= #$../Properties/radius$
			@repositionRadiusOffset += #$ellipsoidOffset$
			@absoluteOffset += #$ellipsoidOffset$
			!ellipsoidOffset = DELETE
		}
	}
	@Body:HAS[#testName[true]&#spaceCenterAltitudeOverride]
	{
		@SpaceCenter
		{
			@repositionRadiusOffset = #$../spaceCenterAltitudeOverride$
			@repositionRadiusOffset += 46
			@absoluteOffset = #$../spaceCenterAltitudeOverride$
		}
	}
	@Body:HAS[#testName[true]&~isTiny[true]]
	{
		@SpaceCenter
		{
			@decalLatitude /= #$../radiusFactor$
			@decalLongitude /= #$../radiusFactor$
		}
	}
	@Body:HAS[#testName[true]&#isTiny[true]]
	{
		@SpaceCenter
		{
			@radius = #$../Properties/radius$
			@radius *= 0.9
		}
	}
}
@Kopernicus:LAST[zzEdgeOfEternity]:HAS[@Body:HAS[#testName[true]]]
{
	@Body[Kerbin]:HAS[#oldTemplate[Jool|Sun]]
	{
		%PQS
		{
			%Mods
			{
				&VertexHeightMap
				{
					map = EdgeOfEternity/Bodies/Other/Blank.png
					deformity = 0
					offset = 1
					scaleDeformityByRadius = false
					enabled = true
					order = 20
				}
			}
		}
	}
	@Body[Kerbin]:HAS[#cbNameLater[Cerberus]]
	{
		@SpaceCenter
		{
			@absoluteOffset = -450
			@radius = 20000
			@repositionRadiusOffset = -20
		}
	}
	@Body:HAS[#testParent[true]]
	{
		@Orbit
		{
			@referenceBody = Kerbin
		}
	}
	lightRatio = #$/Body[Haven]/Orbit/semiMajorAxis$
	checkingHomeReference = true
	LightRefValueContainer
	{
		homeDist = #$/Body[Kerbin]/Orbit/semiMajorAxis$
		homeRef = #$/Body[Kerbin]/Orbit/referenceBody$
		check = false
	}
	@Body,*
	{
		testHomeRef = false
	}
}
LOOPTRACKER {}
@LOOPTRACKER:LAST[zzEdgeOfEternity]
{
	runLoop = true
}
@Kopernicus:LAST[zzzEdgeOfEternity]:HAS[#checkingHomeReference[true]]
{
	@checkingHomeReference = #$@LOOPTRACKER/runLoop$
	@Body,*
	{
		@testHomeRef = #$name$.$../LightRefValueContainer/homeRef$
		@testHomeRef ^= :(\w+)\.(\1)$:true:
	}
	@Body:HAS[@Orbit&#testHomeRef[true]&!Template[Sun]]
	{
		|. = HOMEREF
		*/LightRefValueContainer/check = true
	}
	@LightRefValueContainer:HAS[#check[true]]
	{
		@homeDist = #$../HOMEREF/Orbit/semiMajorAxis$
		@homeRef = #$../HOMEREF/Orbit/referenceBody$
		@check = false
	}
	&HOMEREF
	{
		dummyHomeRef = true
	}
	@HOMEREF
	{
		|. = Body
	}
	@Body:HAS[#testHomeRef[true]&@Template[Sun]]
	{
		*@LOOPTRACKER/runLoop = false
	}
	@Body:HAS[#testHomeRef[true]&!Orbit]
	{
		*@LOOPTRACKER/runLoop = false
	}
	MM_PATCH_LOOP {}
}
@Kopernicus:HAS[@Body:HAS[#testName[true]]]:FINAL
{
	@checkingHomeReference = #$@LOOPTRACKER/runLoop$

	@lightRatio /= #$/LightRefValueContainer/homeDist$
	@lightRatio != 2
	@Body:HAS[@Template[Sun]],*
	{
		@ScaledVersion
		{
			@Light
			{
				@luminosity *= #$../../../lightRatio$
			}
		}
	}
	@Body[Kerbin]
	{
		@Orbit
		{
			@referenceBody = Sun
		}
	}
	!Body:HAS[#dummyHomeRef[true]] {}
}